{"version":3,"sources":["../src/SignedData.js"],"names":["asn1js","SignedData","parameters","version","defaultValues","digestAlgorithms","encapContentInfo","certificates","crls","ocsps","signerInfos","fromSchema","schema","asn1","compareSchema","verified","Error","result","valueBlock","valueDec","Array","from","algorithm","idBlock","tagClass","tagNumber","certificateSet","slice","crl","signerInfoSchema","encodeFlag","outputArray","push","Integer","value","Set","toSchema","certificateSetSchema","Constructed","crlSchema","signerInfo","Sequence","_object","toJSON","certificate","signer","data","ArrayBuffer","trustedCerts","checkDate","Date","checkChain","extendedMode","findOrigin","findIssuer","sequence","Promise","resolve","messageDigestValue","shaAlgorithm","signerCertificate","timestampSerial","certificatePath","engine","crypto","reject","date","code","message","signatureVerified","signerCertificateVerified","sid","then","issuer","isEqual","serialNumber","all","filter","digest","name","Uint8Array","subjectPublicKeyInfo","subjectPublicKey","valueHex","entries","index","results","eContentType","fromBER","eContent","tstInfo","ex","genTime","byteLength","verify","checkCA","cert","isCA","extensions","extension","extnID","parsedValue","cA","promiseResults","certificateChainValidationEngineParameters","certs","_result","certificateChainEngine","otherRevInfoFormat","otherRevInfo","verificationResult","resultMessage","error","Object","signerInfoHashAlgorithm","digestAlgorithm","algorithmId","isConstructed","contentValue","valueBeforeDecode","foundContentType","foundMessageDigest","signedAttrs","attributes","attribute","type","values","encodedValue","subtle","verifyWithPublicKey","signature","signatureAlgorithm","privateKey","signerIndex","hashAlgorithm","hashAlgorithmOID","length","algorithmParams","Null","getSignatureParameters","toBER","view","content","signWithPrivateKey","OctetString","memberName","memberValue","names","optional","blockName","Repeated"],"mappings":"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","file":"SignedData.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, utilConcatBuf, isEqualBuffer } from \"pvutils\";\r\nimport {\r\n\tgetCrypto,\r\n\tgetEngine,\r\n\tgetOIDByAlgorithm,\r\n\tgetAlgorithmByOID\r\n} from \"./common.js\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport EncapsulatedContentInfo from \"./EncapsulatedContentInfo.js\";\r\nimport Certificate from \"./Certificate.js\";\r\nimport CertificateRevocationList from \"./CertificateRevocationList.js\";\r\nimport OtherRevocationInfoFormat from \"./OtherRevocationInfoFormat.js\";\r\nimport SignerInfo from \"./SignerInfo.js\";\r\nimport CertificateSet from \"./CertificateSet.js\";\r\nimport RevocationInfoChoices from \"./RevocationInfoChoices.js\";\r\nimport IssuerAndSerialNumber from \"./IssuerAndSerialNumber.js\";\r\nimport TSTInfo from \"./TSTInfo.js\";\r\nimport CertificateChainValidationEngine from \"./CertificateChainValidationEngine.js\";\r\nimport BasicOCSPResponse from \"./BasicOCSPResponse.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class SignedData \r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for SignedData class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @description version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", SignedData.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {Array.<AlgorithmIdentifier>}\r\n\t\t * @description digestAlgorithms\r\n\t\t */\r\n\t\tthis.digestAlgorithms = getParametersValue(parameters, \"digestAlgorithms\", SignedData.defaultValues(\"digestAlgorithms\"));\r\n\t\t/**\r\n\t\t * @type {EncapsulatedContentInfo}\r\n\t\t * @description encapContentInfo\r\n\t\t */\r\n\t\tthis.encapContentInfo = getParametersValue(parameters, \"encapContentInfo\", SignedData.defaultValues(\"encapContentInfo\"));\r\n\t\t\r\n\t\tif(\"certificates\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Certificate|OtherCertificateFormat>}\r\n\t\t\t * @description certificates\r\n\t\t\t */\r\n\t\t\tthis.certificates = getParametersValue(parameters, \"certificates\", SignedData.defaultValues(\"certificates\"));\r\n\t\t\r\n\t\tif(\"crls\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<CertificateRevocationList|OtherRevocationInfoFormat>}\r\n\t\t\t * @description crls\r\n\t\t\t */\r\n\t\t\tthis.crls = getParametersValue(parameters, \"crls\", SignedData.defaultValues(\"crls\"));\r\n\t\t\r\n\t\tif(\"ocsps\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<BasicOCSPResponse>}\r\n\t\t\t * @description crls\r\n\t\t\t */\r\n\t\t\tthis.ocsps = getParametersValue(parameters, \"ocsps\", SignedData.defaultValues(\"ocsps\"));\r\n\r\n\t\t/**\r\n\t\t * @type {Array.<SignerInfo>}\r\n\t\t * @description signerInfos\r\n\t\t */\r\n\t\tthis.signerInfos = getParametersValue(parameters, \"signerInfos\", SignedData.defaultValues(\"signerInfos\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"digestAlgorithms\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"encapContentInfo\":\r\n\t\t\t\treturn new EncapsulatedContentInfo();\r\n\t\t\tcase \"certificates\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"crls\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"ocsps\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"signerInfos\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SignedData class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn (memberValue === SignedData.defaultValues(\"version\"));\r\n\t\t\tcase \"encapContentInfo\":\r\n\t\t\t\treturn new EncapsulatedContentInfo();\r\n\t\t\tcase \"digestAlgorithms\":\r\n\t\t\tcase \"certificates\":\r\n\t\t\tcase \"crls\":\r\n\t\t\tcase \"ocsps\":\r\n\t\t\tcase \"signerInfos\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SignedData class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//SignedData ::= SEQUENCE {\r\n\t\t//    version CMSVersion,\r\n\t\t//    digestAlgorithms DigestAlgorithmIdentifiers,\r\n\t\t//    encapContentInfo EncapsulatedContentInfo,\r\n\t\t//    certificates [0] IMPLICIT CertificateSet OPTIONAL,\r\n\t\t//    crls [1] IMPLICIT RevocationInfoChoices OPTIONAL,\r\n\t\t//    signerInfos SignerInfos }\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [optional]\r\n\t\t * @property {string} [digestAlgorithms]\r\n\t\t * @property {string} [encapContentInfo]\r\n\t\t * @property {string} [certificates]\r\n\t\t * @property {string} [crls]\r\n\t\t * @property {string} [signerInfos]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\tif((\"optional\" in names) === false)\r\n\t\t\tnames.optional = false;\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"SignedData\"),\r\n\t\t\toptional: names.optional,\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"SignedData.version\") }),\r\n\t\t\t\tnew asn1js.Set({\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.digestAlgorithms || \"SignedData.digestAlgorithms\"),\r\n\t\t\t\t\t\t\tvalue: AlgorithmIdentifier.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tEncapsulatedContentInfo.schema(names.encapContentInfo || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"SignedData.encapContentInfo\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tname: (names.certificates || \"SignedData.certificates\"),\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: CertificateSet.schema().valueBlock.value\r\n\t\t\t\t}), // IMPLICIT CertificateSet\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: RevocationInfoChoices.schema(names.crls || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tcrls: \"SignedData.crls\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}).valueBlock.value\r\n\t\t\t\t}), // IMPLICIT RevocationInfoChoices\r\n\t\t\t\tnew asn1js.Set({\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.signerInfos || \"SignedData.signerInfos\"),\r\n\t\t\t\t\t\t\tvalue: SignerInfo.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tSignedData.schema()\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for SignedData\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result[\"SignedData.version\"].valueBlock.valueDec;\r\n\t\t\r\n\t\tif(\"SignedData.digestAlgorithms\" in asn1.result) // Could be empty SET of digest algorithms\r\n\t\t\tthis.digestAlgorithms = Array.from(asn1.result[\"SignedData.digestAlgorithms\"], algorithm => new AlgorithmIdentifier({ schema: algorithm }));\r\n\t\t\r\n\t\tthis.encapContentInfo = new EncapsulatedContentInfo({ schema: asn1.result[\"SignedData.encapContentInfo\"] });\r\n\t\t\r\n\t\tif(\"SignedData.certificates\" in asn1.result)\r\n\t\t{\r\n\t\t\tasn1.result[\"SignedData.certificates\"].idBlock.tagClass = 1; // UNIVERSAL\r\n\t\t\tasn1.result[\"SignedData.certificates\"].idBlock.tagNumber = 17; // SET\r\n\r\n\t\t\tconst certificateSet = new CertificateSet({ schema: asn1.result[\"SignedData.certificates\"] });\r\n\t\t\tthis.certificates = certificateSet.certificates.slice(0); // Copy all just for making comfortable access\r\n\t\t}\r\n\t\t\r\n\t\tif(\"SignedData.crls\" in asn1.result)\r\n\t\t{\r\n\t\t\tthis.crls = Array.from(asn1.result[\"SignedData.crls\"], crl =>\r\n\t\t\t{\r\n\t\t\t\tif(crl.idBlock.tagClass === 1)\r\n\t\t\t\t\treturn new CertificateRevocationList({ schema: crl });\r\n\t\t\t\t\r\n\t\t\t\t//region Create SEQUENCE from [1]\r\n\t\t\t\tcrl.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\t\t\tcrl.idBlock.tagNumber = 16; // SEQUENCE\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\treturn new OtherRevocationInfoFormat({ schema: crl });\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\tif(\"SignedData.signerInfos\" in asn1.result) // Could be empty SET SignerInfos\r\n\t\t\tthis.signerInfos = Array.from(asn1.result[\"SignedData.signerInfos\"], signerInfoSchema => new SignerInfo({ schema: signerInfoSchema }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema(encodeFlag = false)\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(new asn1js.Integer({ value: this.version }));\r\n\t\t\r\n\t\t//region Create array of digest algorithms\r\n\t\toutputArray.push(new asn1js.Set({\r\n\t\t\tvalue: Array.from(this.digestAlgorithms, algorithm => algorithm.toSchema(encodeFlag))\r\n\t\t}));\r\n\t\t//endregion\r\n\t\t\r\n\t\toutputArray.push(this.encapContentInfo.toSchema());\r\n\t\t\r\n\t\tif(\"certificates\" in this)\r\n\t\t{\r\n\t\t\tconst certificateSet = new CertificateSet({ certificates: this.certificates });\r\n\t\t\tconst certificateSetSchema = certificateSet.toSchema();\r\n\t\t\t\r\n\t\t\tcertificateSetSchema.idBlock.tagClass = 3;\r\n\t\t\tcertificateSetSchema.idBlock.tagNumber = 0;\r\n\t\t\t\r\n\t\t\toutputArray.push(certificateSetSchema);\r\n\t\t}\r\n\t\t\r\n\t\tif(\"crls\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: Array.from(this.crls, crl =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif(crl instanceof OtherRevocationInfoFormat)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst crlSchema = crl.toSchema(encodeFlag);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tcrlSchema.idBlock.tagClass = 3;\r\n\t\t\t\t\t\tcrlSchema.idBlock.tagNumber = 1;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\treturn crlSchema;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn crl.toSchema(encodeFlag);\r\n\t\t\t\t})\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\t//region Create array of signer infos\r\n\t\toutputArray.push(new asn1js.Set({\r\n\t\t\tvalue: Array.from(this.signerInfos, signerInfo => signerInfo.toSchema(encodeFlag))\r\n\t\t}));\r\n\t\t//endregion\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tversion: this.version,\r\n\t\t\tdigestAlgorithms: Array.from(this.digestAlgorithms, algorithm => algorithm.toJSON()),\r\n\t\t\tencapContentInfo: this.encapContentInfo.toJSON()\r\n\t\t};\r\n\t\t\r\n\t\tif(\"certificates\" in this)\r\n\t\t\t_object.certificates = Array.from(this.certificates, certificate => certificate.toJSON());\r\n\t\t\r\n\t\tif(\"crls\" in this)\r\n\t\t\t_object.crls = Array.from(this.crls, crl => crl.toJSON());\r\n\t\t\r\n\t\t_object.signerInfos = Array.from(this.signerInfos, signerInfo => signerInfo.toJSON());\r\n\t\t\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Verify current SignedData value\r\n\t * @param signer\r\n\t * @param data\r\n\t * @param trustedCerts\r\n\t * @param checkDate\r\n\t * @param checkChain\r\n\t * @param includeSignerCertificate\r\n\t * @param extendedMode\r\n\t * @param findOrigin\r\n\t * @param findIssuer\r\n\t * @returns {*}\r\n\t */\r\n\tverify({\r\n\t\tsigner = (-1),\r\n\t\tdata = (new ArrayBuffer(0)),\r\n\t\ttrustedCerts = [],\r\n\t\tcheckDate = (new Date()),\r\n\t\tcheckChain = false,\r\n\t\textendedMode = false,\r\n\t\tfindOrigin = null,\r\n\t\tfindIssuer = null\r\n\t} = {})\r\n\t{\r\n\t\t//region Global variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tlet messageDigestValue = new ArrayBuffer(0);\r\n\t\t\r\n\t\tlet shaAlgorithm = \"\";\r\n\t\t\r\n\t\tlet signerCertificate = {};\r\n\t\t\r\n\t\tlet timestampSerial = null;\r\n\t\t\r\n\t\tlet certificatePath = [];\r\n\t\t\r\n\t\tconst engine = getEngine();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a signer number\r\n\t\tif(signer === (-1))\r\n\t\t{\r\n\t\t\tif(extendedMode)\r\n\t\t\t{\r\n\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\tcode: 1,\r\n\t\t\t\t\tmessage: \"Unable to get signer index from input parameters\",\r\n\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\tsignerCertificate: null,\r\n\t\t\t\t\tsignerCertificateVerified: null\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn Promise.reject(\"Unable to get signer index from input parameters\");\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check that certificates field was included in signed data\r\n\t\tif((\"certificates\" in this) === false)\r\n\t\t{\r\n\t\t\tif(extendedMode)\r\n\t\t\t{\r\n\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\tcode: 2,\r\n\t\t\t\t\tmessage: \"No certificates attached to this signed data\",\r\n\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\tsignerCertificate: null,\r\n\t\t\t\t\tsignerCertificateVerified: null\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn Promise.reject(\"No certificates attached to this signed data\");\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Find a certificate for specified signer\r\n\t\tif(this.signerInfos[signer].sid instanceof IssuerAndSerialNumber)\r\n\t\t{\r\n\t\t\tsequence = sequence.then(() =>\r\n\t\t\t{\r\n\t\t\t\tfor(const certificate of this.certificates)\r\n\t\t\t\t{\r\n\t\t\t\t\tif((certificate instanceof Certificate) === false)\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\r\n\t\t\t\t\tif((certificate.issuer.isEqual(this.signerInfos[signer].sid.issuer)) &&\r\n\t\t\t\t\t\t(certificate.serialNumber.isEqual(this.signerInfos[signer].sid.serialNumber)))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tsignerCertificate = certificate;\r\n\t\t\t\t\t\treturn Promise.resolve();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(extendedMode)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\tcode: 3,\r\n\t\t\t\t\t\tmessage: \"Unable to find signer certificate\",\r\n\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\tsignerCertificate: null,\r\n\t\t\t\t\t\tsignerCertificateVerified: null\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn Promise.reject(\"Unable to find signer certificate\");\r\n\t\t\t});\r\n\t\t}\r\n\t\telse // Find by SubjectKeyIdentifier\r\n\t\t{\r\n\t\t\tsequence = sequence.then(() =>\r\n\t\t\t\tPromise.all(Array.from(this.certificates.filter(certificate => (certificate instanceof Certificate)), certificate =>\r\n\t\t\t\t\tcrypto.digest({ name: \"sha-1\" }, new Uint8Array(certificate.subjectPublicKeyInfo.subjectPublicKey.valueBlock.valueHex)))\r\n\t\t\t\t).then(results =>\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(const [index, certificate] of this.certificates.entries())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif((certificate instanceof Certificate) === false)\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(isEqualBuffer(results[index], this.signerInfos[signer].sid.valueBlock.valueHex))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tsignerCertificate = certificate;\r\n\t\t\t\t\t\t\treturn Promise.resolve();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(extendedMode)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\t\tcode: 3,\r\n\t\t\t\t\t\t\tmessage: \"Unable to find signer certificate\",\r\n\t\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\t\tsignerCertificate: null,\r\n\t\t\t\t\t\t\tsignerCertificateVerified: null\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn Promise.reject(\"Unable to find signer certificate\");\r\n\t\t\t\t}, () =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif(extendedMode)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\t\tcode: 3,\r\n\t\t\t\t\t\t\tmessage: \"Unable to find signer certificate\",\r\n\t\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\t\tsignerCertificate: null,\r\n\t\t\t\t\t\t\tsignerCertificateVerified: null\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn Promise.reject(\"Unable to find signer certificate\");\r\n\t\t\t\t})\r\n\t\t\t);\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Verify internal digest in case of \"tSTInfo\" content type\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\tif(this.encapContentInfo.eContentType === \"1.2.840.113549.1.9.16.1.4\")\r\n\t\t\t{\r\n\t\t\t\t//region Check \"eContent\" precense\r\n\t\t\t\tif((\"eContent\" in this.encapContentInfo) === false)\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Initialize TST_INFO value\r\n\t\t\t\tconst asn1 = asn1js.fromBER(this.encapContentInfo.eContent.valueBlock.valueHex);\r\n\t\t\t\tlet tstInfo;\r\n\t\t\t\t\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\ttstInfo = new TSTInfo({ schema: asn1.result });\r\n\t\t\t\t}\r\n\t\t\t\tcatch(ex)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Change \"checkDate\" and append \"timestampSerial\"\r\n\t\t\t\tcheckDate = tstInfo.genTime;\r\n\t\t\t\ttimestampSerial = tstInfo.serialNumber.valueBlock.valueHex;\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Check that we do have detached data content\r\n\t\t\t\tif(data.byteLength === 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(extendedMode)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\t\tcode: 4,\r\n\t\t\t\t\t\t\tmessage: \"Missed detached data input array\",\r\n\t\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\t\tsignerCertificate,\r\n\t\t\t\t\t\t\tsignerCertificateVerified: null\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn Promise.reject(\"Missed detached data input array\");\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\treturn tstInfo.verify({ data });\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn true;\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Make additional verification for signer's certificate\r\n\t\tfunction checkCA(cert)\r\n\t\t{\r\n\t\t\t/// <param name=\"cert\" type=\"in_window.org.pkijs.simpl.CERT\">Certificate to find CA flag for</param>\r\n\t\t\t\r\n\t\t\t//region Do not include signer's certificate\r\n\t\t\tif((cert.issuer.isEqual(signerCertificate.issuer) === true) && (cert.serialNumber.isEqual(signerCertificate.serialNumber) === true))\r\n\t\t\t\treturn null;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tlet isCA = false;\r\n\t\t\t\r\n\t\t\tif(\"extensions\" in cert)\r\n\t\t\t{\r\n\t\t\t\tfor(const extension of cert.extensions)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(extension.extnID === \"2.5.29.19\") // BasicConstraints\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(\"cA\" in extension.parsedValue)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(extension.parsedValue.cA === true)\r\n\t\t\t\t\t\t\t\tisCA = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(isCA)\r\n\t\t\t\treturn cert;\r\n\t\t\t\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\t\r\n\t\tif(checkChain)\r\n\t\t{\r\n\t\t\tsequence = sequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\t//region Verify result of previous operation\r\n\t\t\t\tif(result === false)\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\tconst promiseResults = Array.from(this.certificates.filter(certificate => (certificate instanceof Certificate)), certificate => checkCA(certificate));\r\n\t\t\t\t\r\n\t\t\t\tconst certificateChainValidationEngineParameters = {\r\n\t\t\t\t\tcheckDate,\r\n\t\t\t\t\tcerts: Array.from(promiseResults.filter(_result => (_result !== null))),\r\n\t\t\t\t\ttrustedCerts\r\n\t\t\t\t};\r\n\t\t\t\t\r\n\t\t\t\tif(findIssuer !== null)\r\n\t\t\t\t\tcertificateChainValidationEngineParameters.findIssuer = findIssuer;\r\n\t\t\t\t\r\n\t\t\t\tif(findOrigin !== null)\r\n\t\t\t\t\tcertificateChainValidationEngineParameters.findOrigin = findOrigin;\r\n\t\t\t\t\r\n\t\t\t\tconst certificateChainEngine = new CertificateChainValidationEngine(certificateChainValidationEngineParameters);\r\n\t\t\t\t\r\n\t\t\t\tcertificateChainEngine.certs.push(signerCertificate);\r\n\t\t\t\t\r\n\t\t\t\tif(\"crls\" in this)\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(const crl of this.crls)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(crl instanceof CertificateRevocationList)\r\n\t\t\t\t\t\t\tcertificateChainEngine.crls.push(crl);\r\n\t\t\t\t\t\telse // Assumed \"revocation value\" has \"OtherRevocationInfoFormat\"\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(crl.otherRevInfoFormat === \"1.3.6.1.5.5.7.48.1.1\") // Basic OCSP response\r\n\t\t\t\t\t\t\t\tcertificateChainEngine.ocsps.push(new BasicOCSPResponse({ schema: crl.otherRevInfo }));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(\"ocsps\" in this)\r\n\t\t\t\t\tcertificateChainEngine.ocsps.push(...(this.ocsps));\r\n\t\t\t\t\r\n\t\t\t\treturn certificateChainEngine.verify().then(verificationResult =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif(\"certificatePath\" in verificationResult)\r\n\t\t\t\t\t\tcertificatePath = verificationResult.certificatePath;\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(verificationResult.result === true)\r\n\t\t\t\t\t\treturn Promise.resolve(true);\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(extendedMode)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\t\tcode: 5,\r\n\t\t\t\t\t\t\tmessage: `Validation of signer's certificate failed: ${verificationResult.resultMessage}`,\r\n\t\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\t\tsignerCertificate,\r\n\t\t\t\t\t\t\tsignerCertificateVerified: false\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn Promise.reject(\"Validation of signer's certificate failed\");\r\n\t\t\t\t}, error =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif(extendedMode)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\t\tcode: 5,\r\n\t\t\t\t\t\t\tmessage: `Validation of signer's certificate failed with error: ${((error instanceof Object) ? error.resultMessage : error)}`,\r\n\t\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\t\tsignerCertificate,\r\n\t\t\t\t\t\t\tsignerCertificateVerified: false\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn Promise.reject(`Validation of signer's certificate failed with error: ${((error instanceof Object) ? error.resultMessage : error)}`);\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Find signer's hashing algorithm\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\t//region Verify result of previous operation\r\n\t\t\tif(result === false)\r\n\t\t\t\treturn false;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tconst signerInfoHashAlgorithm = getAlgorithmByOID(this.signerInfos[signer].digestAlgorithm.algorithmId);\r\n\t\t\tif((\"name\" in signerInfoHashAlgorithm) === false)\r\n\t\t\t{\r\n\t\t\t\tif(extendedMode)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\tcode: 7,\r\n\t\t\t\t\t\tmessage: `Unsupported signature algorithm: ${this.signerInfos[signer].digestAlgorithm.algorithmId}`,\r\n\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\tsignerCertificate,\r\n\t\t\t\t\t\tsignerCertificateVerified: true\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn Promise.reject(`Unsupported signature algorithm: ${this.signerInfos[signer].digestAlgorithm.algorithmId}`);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tshaAlgorithm = signerInfoHashAlgorithm.name;\r\n\t\t\t\r\n\t\t\treturn true;\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create correct data block for verification\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\t//region Verify result of previous operation\r\n\t\t\tif(result === false)\r\n\t\t\t\treturn false;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tif(\"eContent\" in this.encapContentInfo) // Attached data\r\n\t\t\t{\r\n\t\t\t\tif((this.encapContentInfo.eContent.idBlock.tagClass === 1) &&\r\n\t\t\t\t\t(this.encapContentInfo.eContent.idBlock.tagNumber === 4))\r\n\t\t\t\t{\r\n\t\t\t\t\tif(this.encapContentInfo.eContent.idBlock.isConstructed === false)\r\n\t\t\t\t\t\tdata = this.encapContentInfo.eContent.valueBlock.valueHex;\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfor(const contentValue of this.encapContentInfo.eContent.valueBlock.value)\r\n\t\t\t\t\t\t\tdata = utilConcatBuf(data, contentValue.valueBlock.valueHex);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t\tdata = this.encapContentInfo.eContent.valueBlock.valueBeforeDecode;\r\n\t\t\t}\r\n\t\t\telse // Detached data\r\n\t\t\t{\r\n\t\t\t\tif(data.byteLength === 0) // Check that \"data\" already provided by function parameter\r\n\t\t\t\t{\r\n\t\t\t\t\tif(extendedMode)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\t\tcode: 8,\r\n\t\t\t\t\t\t\tmessage: \"Missed detached data input array\",\r\n\t\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\t\tsignerCertificate,\r\n\t\t\t\t\t\t\tsignerCertificateVerified: true\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn Promise.reject(\"Missed detached data input array\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(\"signedAttrs\" in this.signerInfos[signer])\r\n\t\t\t{\r\n\t\t\t\t//region Check mandatory attributes\r\n\t\t\t\tlet foundContentType = false;\r\n\t\t\t\tlet foundMessageDigest = false;\r\n\t\t\t\t\r\n\t\t\t\tfor(const attribute of this.signerInfos[signer].signedAttrs.attributes)\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Check that \"content-type\" attribute exists\r\n\t\t\t\t\tif(attribute.type === \"1.2.840.113549.1.9.3\")\r\n\t\t\t\t\t\tfoundContentType = true;\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Check that \"message-digest\" attribute exists\r\n\t\t\t\t\tif(attribute.type === \"1.2.840.113549.1.9.4\")\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfoundMessageDigest = true;\r\n\t\t\t\t\t\tmessageDigestValue = attribute.values[0].valueBlock.valueHex;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Speed-up searching\r\n\t\t\t\t\tif(foundContentType && foundMessageDigest)\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(foundContentType === false)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(extendedMode)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\t\tcode: 9,\r\n\t\t\t\t\t\t\tmessage: \"Attribute \\\"content-type\\\" is a mandatory attribute for \\\"signed attributes\\\"\",\r\n\t\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\t\tsignerCertificate,\r\n\t\t\t\t\t\t\tsignerCertificateVerified: true\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn Promise.reject(\"Attribute \\\"content-type\\\" is a mandatory attribute for \\\"signed attributes\\\"\");\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(foundMessageDigest === false)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(extendedMode)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\t\tcode: 10,\r\n\t\t\t\t\t\t\tmessage: \"Attribute \\\"message-digest\\\" is a mandatory attribute for \\\"signed attributes\\\"\",\r\n\t\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\t\tsignerCertificate,\r\n\t\t\t\t\t\t\tsignerCertificateVerified: true\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn Promise.reject(\"Attribute \\\"message-digest\\\" is a mandatory attribute for \\\"signed attributes\\\"\");\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn true;\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Verify \"message-digest\" attribute in case of \"signedAttrs\"\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\t//region Verify result of previous operation\r\n\t\t\tif(result === false)\r\n\t\t\t\treturn false;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tif(\"signedAttrs\" in this.signerInfos[signer])\r\n\t\t\t\treturn crypto.digest(shaAlgorithm, new Uint8Array(data));\r\n\t\t\t\r\n\t\t\treturn true;\r\n\t\t}).then(\r\n\t\t\t/**\r\n\t\t\t * @param {ArrayBuffer} result\r\n\t\t\t */\r\n\t\t\tresult =>\r\n\t\t\t{\r\n\t\t\t\t//region Verify result of previous operation\r\n\t\t\t\tif(result === false)\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\tif(\"signedAttrs\" in this.signerInfos[signer])\r\n\t\t\t\t{\r\n\t\t\t\t\tif(isEqualBuffer(result, messageDigestValue))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdata = this.signerInfos[signer].signedAttrs.encodedValue;\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\t//region Verify result of previous operation\r\n\t\t\tif(result === false)\r\n\t\t\t\treturn false;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn engine.subtle.verifyWithPublicKey(data, this.signerInfos[signer].signature, signerCertificate.subjectPublicKeyInfo, signerCertificate.signatureAlgorithm, shaAlgorithm);\r\n\t\t});\r\n\t\t\r\n\t\t//region Make a final result\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tif(extendedMode)\r\n\t\t\t{\r\n\t\t\t\treturn {\r\n\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\tcode: 14,\r\n\t\t\t\t\tmessage: \"\",\r\n\t\t\t\t\tsignatureVerified: result,\r\n\t\t\t\t\tsignerCertificate,\r\n\t\t\t\t\ttimestampSerial,\r\n\t\t\t\t\tsignerCertificateVerified: true,\r\n\t\t\t\t\tcertificatePath\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn result;\r\n\t\t}, error =>\r\n\t\t{\r\n\t\t\tif(extendedMode)\r\n\t\t\t{\r\n\t\t\t\tif(\"code\" in error)\r\n\t\t\t\t\treturn Promise.reject(error);\r\n\t\t\t\t\r\n\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\tcode: 15,\r\n\t\t\t\t\tmessage: `Error during verification: ${error.message}`,\r\n\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\tsignerCertificate,\r\n\t\t\t\t\ttimestampSerial,\r\n\t\t\t\t\tsignerCertificateVerified: true\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn Promise.reject(error);\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Signing current SignedData\r\n\t * @param {key} privateKey Private key for \"subjectPublicKeyInfo\" structure\r\n\t * @param {number} signerIndex Index number (starting from 0) of signer index to make signature for\r\n\t * @param {string} [hashAlgorithm=\"SHA-1\"] Hashing algorithm. Default SHA-1\r\n\t * @param {ArrayBuffer} [data] Detached data\r\n\t * @returns {*}\r\n\t */\r\n\tsign(privateKey, signerIndex, hashAlgorithm = \"SHA-1\", data = (new ArrayBuffer(0)))\r\n\t{\r\n\t\t//region Initial checking\r\n\t\tif(typeof privateKey === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Need to provide a private key for signing\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\tlet parameters;\r\n\t\t\r\n\t\tconst engine = getEngine();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Simple check for supported algorithm\r\n\t\tconst hashAlgorithmOID = getOIDByAlgorithm({ name: hashAlgorithm });\r\n\t\tif(hashAlgorithmOID === \"\")\r\n\t\t\treturn Promise.reject(`Unsupported hash algorithm: ${hashAlgorithm}`);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Append information about hash algorithm\r\n\t\tif((this.digestAlgorithms.filter(algorithm => algorithm.algorithmId === hashAlgorithmOID)).length === 0)\r\n\t\t{\r\n\t\t\tthis.digestAlgorithms.push(new AlgorithmIdentifier({\r\n\t\t\t\talgorithmId: hashAlgorithmOID,\r\n\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tthis.signerInfos[signerIndex].digestAlgorithm = new AlgorithmIdentifier({\r\n\t\t\talgorithmId: hashAlgorithmOID,\r\n\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"default parameters\" for current algorithm and set correct signature algorithm\r\n\t\tsequence = sequence.then(() => engine.subtle.getSignatureParameters(privateKey, hashAlgorithm));\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tparameters = result.parameters;\r\n\t\t\tthis.signerInfos[signerIndex].signatureAlgorithm = result.signatureAlgorithm;\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create TBS data for signing\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\tif(\"signedAttrs\" in this.signerInfos[signerIndex])\r\n\t\t\t{\r\n\t\t\t\tif(this.signerInfos[signerIndex].signedAttrs.encodedValue.byteLength !== 0)\r\n\t\t\t\t\tdata = this.signerInfos[signerIndex].signedAttrs.encodedValue;\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tdata = this.signerInfos[signerIndex].signedAttrs.toSchema(true).toBER(false);\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Change type from \"[0]\" to \"SET\" acordingly to standard\r\n\t\t\t\t\tconst view = new Uint8Array(data);\r\n\t\t\t\t\tview[0] = 0x31;\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tif(\"eContent\" in this.encapContentInfo) // Attached data\r\n\t\t\t\t{\r\n\t\t\t\t\tif((this.encapContentInfo.eContent.idBlock.tagClass === 1) &&\r\n\t\t\t\t\t\t(this.encapContentInfo.eContent.idBlock.tagNumber === 4))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(this.encapContentInfo.eContent.idBlock.isConstructed === false)\r\n\t\t\t\t\t\t\tdata = this.encapContentInfo.eContent.valueBlock.valueHex;\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tfor(const content of this.encapContentInfo.eContent.valueBlock.value)\r\n\t\t\t\t\t\t\t\tdata = utilConcatBuf(data, content.valueBlock.valueHex);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tdata = this.encapContentInfo.eContent.valueBlock.valueBeforeDecode;\r\n\t\t\t\t}\r\n\t\t\t\telse // Detached data\r\n\t\t\t\t{\r\n\t\t\t\t\tif(data.byteLength === 0) // Check that \"data\" already provided by function parameter\r\n\t\t\t\t\t\treturn Promise.reject(\"Missed detached data input array\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn Promise.resolve();\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Signing TBS data on provided private key\r\n\t\tsequence = sequence.then(() => engine.subtle.signWithPrivateKey(data, privateKey, parameters));\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tthis.signerInfos[signerIndex].signature = new asn1js.OctetString({ valueHex: result });\r\n\t\t\t\r\n\t\t\treturn result;\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}