"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const _1 = require("../");
const _2 = require("../");
describe("Convertors", () => {
    it("String", () => {
        let XmlTest = class XmlTest extends _1.XmlObject {
        };
        __decorate([
            _1.XmlAttribute({})
        ], XmlTest.prototype, "Value", void 0);
        XmlTest = __decorate([
            _1.XmlElement({ localName: "test" })
        ], XmlTest);
        const test = new XmlTest();
        test.Value = "";
        const xmlTest = test.toString();
        const xml = `<test Value=""/>`;
        assert.equal(xmlTest, xml);
        const test2 = XmlTest.LoadXml(xml);
        assert.equal(test2.Value, "");
    });
    it("Number", () => {
        let XmlTest = class XmlTest extends _1.XmlObject {
        };
        __decorate([
            _1.XmlAttribute({ converter: _2.XmlNumberConverter })
        ], XmlTest.prototype, "Value", void 0);
        XmlTest = __decorate([
            _1.XmlElement({ localName: "test" })
        ], XmlTest);
        const test = new XmlTest();
        test.Value = 15;
        const xmlTest = test.toString();
        const xml = `<test Value="15"/>`;
        assert.equal(xmlTest, xml);
        const test2 = XmlTest.LoadXml(xml);
        assert.equal(test2.Value, 15);
    });
    it("Base64", () => {
        let XmlTest = class XmlTest extends _1.XmlObject {
        };
        __decorate([
            _1.XmlAttribute({ converter: _2.XmlBase64Converter })
        ], XmlTest.prototype, "Value", void 0);
        XmlTest = __decorate([
            _1.XmlElement({ localName: "test" })
        ], XmlTest);
        const test = new XmlTest();
        test.Value = new Uint8Array([1, 0, 1]);
        const xmlTest = test.toString();
        const xml = `<test Value="AQAB"/>`;
        assert.equal(xmlTest, xml);
        const test2 = XmlTest.LoadXml(xml);
        assert.equal(test2.Value.length, 3);
        assert.equal(test2.Value[0], 1);
        assert.equal(test2.Value[1], 0);
        assert.equal(test2.Value[2], 1);
    });
    it("Boolean", () => {
        let XmlTest = class XmlTest extends _1.XmlObject {
        };
        __decorate([
            _1.XmlAttribute({ converter: _2.XmlBooleanConverter })
        ], XmlTest.prototype, "ValueTrue", void 0);
        __decorate([
            _1.XmlAttribute({ converter: _2.XmlBooleanConverter })
        ], XmlTest.prototype, "ValueFalse", void 0);
        XmlTest = __decorate([
            _1.XmlElement({ localName: "test" })
        ], XmlTest);
        const test = new XmlTest();
        test.ValueTrue = true;
        test.ValueFalse = false;
        const xmlTest = test.toString();
        const xml = `<test ValueTrue="true" ValueFalse="false"/>`;
        assert.equal(xmlTest, xml);
        const test2 = XmlTest.LoadXml(xml);
        assert.equal(test2.ValueTrue, true);
        assert.equal(test2.ValueFalse, false);
    });
});
