"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const _1 = require("../");
describe("Decorators", () => {
    it("malformed", () => {
        let XmlTest = class XmlTest extends _1.XmlObject {
        };
        XmlTest = __decorate([
            _1.XmlElement({ localName: "test" })
        ], XmlTest);
        const doc = _1.Parse(`<wrongName/>`);
        const test = new XmlTest();
        assert.throws(() => {
            test.LoadXml(doc.documentElement);
        });
    });
    context("Element", () => {
        context("GetXml", () => {
            it("simple", () => {
                let Test = class Test extends _1.XmlObject {
                };
                __decorate([
                    _1.XmlAttribute({ localName: "id" })
                ], Test.prototype, "Id", void 0);
                Test = __decorate([
                    _1.XmlElement({ localName: "test" })
                ], Test);
                const test = new Test();
                assert.equal(test.toString(), "");
                test.Id = "123";
                assert.equal(test.toString(), `<test id="123"/>`);
            });
            it("namespace", () => {
                let Test = class Test extends _1.XmlObject {
                    constructor() {
                        super(...arguments);
                        this.Id = "test";
                    }
                };
                __decorate([
                    _1.XmlAttribute({ localName: "id", defaultValue: "1" })
                ], Test.prototype, "Id", void 0);
                Test = __decorate([
                    _1.XmlElement({ localName: "test", namespaceURI: "http://some.com" })
                ], Test);
                const test = new Test();
                assert.equal(test.toString(), `<test id="test" xmlns="http://some.com"/>`);
                test.Id = "1";
                assert.equal(test.toString(), `<test xmlns="http://some.com"/>`);
            });
            it("prefix with namespace", () => {
                let Test = class Test extends _1.XmlObject {
                    constructor() {
                        super(...arguments);
                        this.Id = "test";
                    }
                };
                __decorate([
                    _1.XmlAttribute({ localName: "id" })
                ], Test.prototype, "Id", void 0);
                Test = __decorate([
                    _1.XmlElement({ localName: "test", prefix: "sm", namespaceURI: "http://some.com" })
                ], Test);
                const test = new Test();
                assert.equal(test.toString(), `<sm:test id="test" xmlns:sm="http://some.com"/>`);
            });
            it("prefix without namespace", () => {
                let Test = class Test extends _1.XmlObject {
                    constructor() {
                        super(...arguments);
                        this.Id = "test";
                    }
                };
                __decorate([
                    _1.XmlAttribute({ localName: "id", defaultValue: "" })
                ], Test.prototype, "Id", void 0);
                Test = __decorate([
                    _1.XmlElement({ localName: "test", prefix: "sm" })
                ], Test);
                const test = new Test();
                test.Id = "";
                assert.equal(test.toString(), `<sm:test xmlns:sm=""/>`);
            });
            context("simple child", () => {
                it("default value", () => {
                    let Test = class Test extends _1.XmlObject {
                    };
                    __decorate([
                        _1.XmlChildElement({ defaultValue: "" })
                    ], Test.prototype, "Child", void 0);
                    Test = __decorate([
                        _1.XmlElement({ localName: "test" })
                    ], Test);
                    const test = new Test();
                    test.Child = "Hello";
                    assert.equal(test.toString(), `<test><Child>Hello</Child></test>`);
                });
                it("default value and required", () => {
                    let Test = class Test extends _1.XmlObject {
                        constructor() {
                            super(...arguments);
                            this.Child = "1";
                        }
                    };
                    __decorate([
                        _1.XmlChildElement({ required: true })
                    ], Test.prototype, "Child", void 0);
                    Test = __decorate([
                        _1.XmlElement({ localName: "test" })
                    ], Test);
                    const test = new Test();
                    assert.equal(test.toString(), `<test><Child>1</Child></test>`);
                });
                it("changed name", () => {
                    let Test = class Test extends _1.XmlObject {
                    };
                    __decorate([
                        _1.XmlChildElement({ localName: "ch", defaultValue: "1" })
                    ], Test.prototype, "Child", void 0);
                    Test = __decorate([
                        _1.XmlElement({ localName: "test" })
                    ], Test);
                    const test = new Test();
                    test.Child = "Hello";
                    assert.equal(test.toString(), `<test><ch>Hello</ch></test>`);
                });
                it("namespace", () => {
                    let Test = class Test extends _1.XmlObject {
                    };
                    __decorate([
                        _1.XmlChildElement({ localName: "ch", defaultValue: "1", namespaceURI: "http://some.com" })
                    ], Test.prototype, "Child", void 0);
                    Test = __decorate([
                        _1.XmlElement({ localName: "test" })
                    ], Test);
                    const test = new Test();
                    test.Child = "Hello";
                    assert.equal(test.toString(), `<test><ch xmlns="http://some.com">Hello</ch></test>`);
                });
                it("prefix", () => {
                    let Test = class Test extends _1.XmlObject {
                    };
                    __decorate([
                        _1.XmlChildElement({ localName: "ch", defaultValue: "1", namespaceURI: "http://some.com", prefix: "px" })
                    ], Test.prototype, "Child", void 0);
                    Test = __decorate([
                        _1.XmlElement({ localName: "test" })
                    ], Test);
                    const test = new Test();
                    test.Child = "Hello";
                    assert.equal(test.toString(), `<test><px:ch xmlns:px="http://some.com">Hello</px:ch></test>`);
                });
            });
            context("Child", () => {
                let XmlBase = class XmlBase extends _1.XmlObject {
                };
                __decorate([
                    _1.XmlAttribute({ localName: "id", defaultValue: "" })
                ], XmlBase.prototype, "Id", void 0);
                XmlBase = __decorate([
                    _1.XmlElement({ localName: "base" })
                ], XmlBase);
                let Child1 = class Child1 extends XmlBase {
                };
                __decorate([
                    _1.XmlChildElement({ localName: "text", defaultValue: 5, converter: _1.XmlNumberConverter })
                ], Child1.prototype, "Value", void 0);
                Child1 = __decorate([
                    _1.XmlElement({ localName: "child1" })
                ], Child1);
                let Child2 = class Child2 extends XmlBase {
                };
                __decorate([
                    _1.XmlChildElement({ localName: "text", defaultValue: new Uint8Array([1, 0, 1]), converter: _1.XmlBase64Converter, required: true })
                ], Child2.prototype, "Value", void 0);
                Child2 = __decorate([
                    _1.XmlElement({ localName: "child2", namespaceURI: "http://number.com" })
                ], Child2);
                let Root = class Root extends XmlBase {
                };
                __decorate([
                    _1.XmlChildElement({ localName: "name", required: true })
                ], Root.prototype, "Name", void 0);
                __decorate([
                    _1.XmlChildElement({ parser: Child1 })
                ], Root.prototype, "ChildOptional", void 0);
                __decorate([
                    _1.XmlChildElement({ parser: Child2, required: true })
                ], Root.prototype, "ChildRequired", void 0);
                Root = __decorate([
                    _1.XmlElement({ localName: "root" })
                ], Root);
                it("default", () => {
                    const root = new Root();
                    root.Name = "MyName";
                    root.ChildRequired = new Child2();
                    assert.equal(root.toString(), `<root><name>MyName</name><child2 xmlns="http://number.com"><text>AQAB</text></child2></root>`);
                    root.ChildOptional.Id = "10";
                    root.ChildOptional.Value = 12;
                    root.ChildRequired.Value = new Uint8Array([1, 1, 1]);
                    assert.equal(root.toString(), `<root><name>MyName</name><child1 id="10"><text>12</text></child1><child2 xmlns="http://number.com"><text>AQEB</text></child2></root>`);
                });
            });
        });
        context("LoadXml", () => {
            context("simple", () => {
                it("value", () => {
                    let XmlTest = class XmlTest extends _1.XmlObject {
                    };
                    __decorate([
                        _1.XmlChildElement({ localName: "value", defaultValue: "" })
                    ], XmlTest.prototype, "Value", void 0);
                    XmlTest = __decorate([
                        _1.XmlElement({ localName: "test" })
                    ], XmlTest);
                    const doc = _1.Parse(`<test><value>123</value></test>`);
                    const test = new XmlTest();
                    test.LoadXml(doc.documentElement);
                    assert.equal(test.Value, "123");
                });
                it("required with error", () => {
                    let XmlTest = class XmlTest extends _1.XmlObject {
                    };
                    __decorate([
                        _1.XmlChildElement({ localName: "value", defaultValue: "", required: true })
                    ], XmlTest.prototype, "Value", void 0);
                    XmlTest = __decorate([
                        _1.XmlElement({ localName: "test" })
                    ], XmlTest);
                    const doc = _1.Parse(`<test/>`);
                    const test = new XmlTest();
                    assert.throws(() => {
                        test.LoadXml(doc.documentElement);
                    });
                });
                it("required", () => {
                    let XmlTest = class XmlTest extends _1.XmlObject {
                    };
                    __decorate([
                        _1.XmlChildElement({ localName: "value", defaultValue: "", required: true })
                    ], XmlTest.prototype, "Value", void 0);
                    XmlTest = __decorate([
                        _1.XmlElement({ localName: "test" })
                    ], XmlTest);
                    const doc = _1.Parse(`<test><value>123</value></test>`);
                    const test = new XmlTest();
                    test.LoadXml(doc.documentElement);
                    assert.equal(test.Value, "123");
                });
                it("converter", () => {
                    let XmlTest = class XmlTest extends _1.XmlObject {
                    };
                    __decorate([
                        _1.XmlChildElement({ localName: "value", defaultValue: null, converter: _1.XmlBase64Converter })
                    ], XmlTest.prototype, "Value", void 0);
                    XmlTest = __decorate([
                        _1.XmlElement({ localName: "test" })
                    ], XmlTest);
                    const doc = _1.Parse(`<test><value>AQAB</value></test>`);
                    const test = new XmlTest();
                    test.LoadXml(doc.documentElement);
                    assert.equal(test.Value instanceof Uint8Array, true);
                    assert.equal(test.Value.length, 3);
                });
                it("namespace", () => {
                    let XmlTest = class XmlTest extends _1.XmlObject {
                    };
                    __decorate([
                        _1.XmlChildElement({ localName: "value", defaultValue: "", namespaceURI: "http://some.com" })
                    ], XmlTest.prototype, "Value", void 0);
                    XmlTest = __decorate([
                        _1.XmlElement({ localName: "test" })
                    ], XmlTest);
                    const doc = _1.Parse(`<test xmlns:p="http://some.com"><p:value>Text</p:value></test>`);
                    const test = new XmlTest();
                    test.LoadXml(doc.documentElement);
                    assert.equal(test.Value, "Text");
                });
            });
            context("child", () => {
                it("simple", () => {
                    let XmlChild = class XmlChild extends _1.XmlObject {
                    };
                    __decorate([
                        _1.XmlAttribute({ localName: "id", defaultValue: "" })
                    ], XmlChild.prototype, "Id", void 0);
                    XmlChild = __decorate([
                        _1.XmlElement({ localName: "value" })
                    ], XmlChild);
                    let XmlTest = class XmlTest extends _1.XmlObject {
                    };
                    __decorate([
                        _1.XmlChildElement({ required: true, parser: XmlChild })
                    ], XmlTest.prototype, "Value", void 0);
                    XmlTest = __decorate([
                        _1.XmlElement({ localName: "test" })
                    ], XmlTest);
                    const test = new XmlTest();
                    test.LoadXml(`<test><value id="123"/></test>`);
                    assert.equal(test.Value.Id, "123");
                });
                it("required", () => {
                    let XmlChild = class XmlChild extends _1.XmlObject {
                    };
                    __decorate([
                        _1.XmlAttribute({ localName: "id", defaultValue: "" })
                    ], XmlChild.prototype, "Id", void 0);
                    XmlChild = __decorate([
                        _1.XmlElement({ localName: "value" })
                    ], XmlChild);
                    let XmlTest = class XmlTest extends _1.XmlObject {
                    };
                    __decorate([
                        _1.XmlChildElement({ required: true, parser: XmlChild })
                    ], XmlTest.prototype, "Value", void 0);
                    XmlTest = __decorate([
                        _1.XmlElement({ localName: "test" })
                    ], XmlTest);
                    const doc = _1.Parse(`<test></test>`);
                    const test = new XmlTest();
                    assert.throws(() => {
                        test.LoadXml(doc.documentElement);
                    });
                });
                it("namespace", () => {
                    let XmlChild = class XmlChild extends _1.XmlObject {
                    };
                    __decorate([
                        _1.XmlAttribute({ localName: "id", defaultValue: "" })
                    ], XmlChild.prototype, "Id", void 0);
                    XmlChild = __decorate([
                        _1.XmlElement({ localName: "value", namespaceURI: "http://some.com" })
                    ], XmlChild);
                    let XmlTest = class XmlTest extends _1.XmlObject {
                    };
                    __decorate([
                        _1.XmlChildElement({ required: true, parser: XmlChild })
                    ], XmlTest.prototype, "Value", void 0);
                    XmlTest = __decorate([
                        _1.XmlElement({ localName: "test" })
                    ], XmlTest);
                    const doc = _1.Parse(`<test xmlns:p="http://some.com"><p:value id="123"/></test>`);
                    const test = new XmlTest();
                    test.LoadXml(doc.documentElement);
                    assert.equal(test.Value.Id, "123");
                    assert.equal(test.Value.Prefix, "p");
                    assert.equal(test.Value.NamespaceURI, "http://some.com");
                });
            });
        });
    });
    context("Attribute", () => {
        context("GetXml", () => {
            let Test = class Test extends _1.XmlObject {
                constructor() {
                    super(...arguments);
                    this.name = "test";
                }
            };
            __decorate([
                _1.XmlAttribute()
            ], Test.prototype, "Id", void 0);
            __decorate([
                _1.XmlAttribute({ localName: "num", defaultValue: 0, converter: _1.XmlNumberConverter })
            ], Test.prototype, "ConvertNumber", void 0);
            __decorate([
                _1.XmlAttribute({ localName: "b64", converter: _1.XmlBase64Converter })
            ], Test.prototype, "ConvertB64", void 0);
            __decorate([
                _1.XmlAttribute({ defaultValue: "none" })
            ], Test.prototype, "Attr1", void 0);
            __decorate([
                _1.XmlAttribute({ required: true, localName: "required" })
            ], Test.prototype, "Required", void 0);
            Test = __decorate([
                _1.XmlElement({ localName: "test" })
            ], Test);
            const test = new Test();
            it("with required empty attribute", () => {
                assert.equal(test.toString(), "");
            });
            it("with filled empty attribute and lower case name", () => {
                test.Required = "some";
                assert.equal(test.toString(), `<test required="some"/>`);
            });
            it("with different default value", () => {
                assert.equal(test.Attr1, "none", "Doesn't have default value for decoration setting");
                test.Attr1 = "wow";
                assert.equal(test.Attr1, "wow");
                assert.equal(test.toString(), `<test Attr1="wow" required="some"/>`);
            });
            it("with default value", () => {
                test.Attr1 = "none";
                assert.equal(test.Attr1, "none");
                assert.equal(test.toString(), `<test required="some"/>`);
            });
            it("with number converter value", () => {
                test.ConvertNumber = 1;
                assert.equal(test.toString(), `<test num="1" required="some"/>`);
            });
            it("with base64 converter value", () => {
                test.ConvertNumber = 0;
                test.ConvertB64 = new Uint8Array([1, 0, 1]);
                assert.equal(test.toString(), `<test b64="AQAB" required="some"/>`);
            });
            it("witd Id", () => {
                test.ConvertB64 = undefined;
                test.Id = "123";
                assert.equal(test.toString(), `<test Id="123" required="some"/>`);
            });
        });
        context("LoadXml", () => {
            it("simple", () => {
                let XmlTest = class XmlTest extends _1.XmlObject {
                };
                __decorate([
                    _1.XmlAttribute({ localName: "id", defaultValue: "" })
                ], XmlTest.prototype, "Id", void 0);
                XmlTest = __decorate([
                    _1.XmlElement({ localName: "test" })
                ], XmlTest);
                const doc = _1.Parse(`<test id="123"/>`);
                const test = new XmlTest();
                test.LoadXml(doc.documentElement);
                assert.equal(test.Id, "123");
            });
            it("required with error", () => {
                let XmlTest = class XmlTest extends _1.XmlObject {
                };
                __decorate([
                    _1.XmlAttribute({ localName: "id", required: true })
                ], XmlTest.prototype, "Id", void 0);
                XmlTest = __decorate([
                    _1.XmlElement({ localName: "test" })
                ], XmlTest);
                const doc = _1.Parse(`<test/>`);
                const test = new XmlTest();
                assert.throws(() => {
                    test.LoadXml(doc.documentElement);
                });
            });
            it("required", () => {
                let XmlTest = class XmlTest extends _1.XmlObject {
                };
                __decorate([
                    _1.XmlAttribute({ localName: "id", required: true })
                ], XmlTest.prototype, "Id", void 0);
                XmlTest = __decorate([
                    _1.XmlElement({ localName: "test" })
                ], XmlTest);
                const doc = _1.Parse(`<test id="123"/>`);
                const test = new XmlTest();
                test.LoadXml(doc.documentElement);
                assert.equal(test.Id, "123");
            });
            it("namespace", () => {
                let XmlTest = class XmlTest extends _1.XmlObject {
                };
                __decorate([
                    _1.XmlAttribute({ localName: "id", defaultValue: "", required: true, namespaceURI: "http://some.com" })
                ], XmlTest.prototype, "Id", void 0);
                XmlTest = __decorate([
                    _1.XmlElement({ localName: "test" })
                ], XmlTest);
                {
                    const doc = _1.Parse(`<test xmlns:s="http://some.com" s:id="123"/>`);
                    const test = new XmlTest();
                    test.LoadXml(doc.documentElement);
                    assert.equal(test.Id, "123");
                }
                {
                    const doc = _1.Parse(`<test xmlns:s="http://other.com" s:id="123"/>`);
                    const test = new XmlTest();
                    assert.throws(() => {
                        test.LoadXml(doc.documentElement);
                    });
                }
            });
            it("converter", () => {
                let XmlTest = class XmlTest extends _1.XmlObject {
                };
                __decorate([
                    _1.XmlAttribute({ localName: "value", defaultValue: null, converter: _1.XmlBase64Converter })
                ], XmlTest.prototype, "Value", void 0);
                XmlTest = __decorate([
                    _1.XmlElement({ localName: "test" })
                ], XmlTest);
                const doc = _1.Parse(`<test value="AQAB"/>`);
                const test = new XmlTest();
                test.LoadXml(doc.documentElement);
                assert.equal(test.Value instanceof Uint8Array, true);
                assert.equal(test.Value.length, 3);
            });
        });
    });
    context("Collection", () => {
        context("GetXml", () => {
            it("simple", () => {
                let XmlTransform = class XmlTransform extends _1.XmlObject {
                };
                __decorate([
                    _1.XmlChildElement({ defaultValue: "" })
                ], XmlTransform.prototype, "Value", void 0);
                XmlTransform = __decorate([
                    _1.XmlElement({ localName: "transform" })
                ], XmlTransform);
                let XmlTransforms = class XmlTransforms extends _1.XmlCollection {
                };
                XmlTransforms = __decorate([
                    _1.XmlElement({ localName: "transforms", parser: XmlTransform })
                ], XmlTransforms);
                let XmlTest = class XmlTest extends _1.XmlObject {
                };
                __decorate([
                    _1.XmlChildElement({ minOccurs: 1, parser: XmlTransforms })
                ], XmlTest.prototype, "Transforms", void 0);
                XmlTest = __decorate([
                    _1.XmlElement({ localName: "test" })
                ], XmlTest);
                const test = new XmlTest();
                test.Transforms = new XmlTransforms();
                const t = new XmlTransform();
                t.Value = "Hello";
                test.Transforms.Add(t);
                assert.equal(test.toString(), `<test><transforms><transform><Value>Hello</Value></transform></transforms></test>`);
            });
            it("no root", () => {
                let XmlTransform = class XmlTransform extends _1.XmlObject {
                };
                __decorate([
                    _1.XmlChildElement({ defaultValue: "" })
                ], XmlTransform.prototype, "Value", void 0);
                XmlTransform = __decorate([
                    _1.XmlElement({ localName: "transform" })
                ], XmlTransform);
                let XmlTransforms = class XmlTransforms extends _1.XmlCollection {
                };
                XmlTransforms = __decorate([
                    _1.XmlElement({ localName: "transforms", parser: XmlTransform })
                ], XmlTransforms);
                let XmlTest = class XmlTest extends _1.XmlObject {
                };
                __decorate([
                    _1.XmlChildElement({ minOccurs: 1, parser: XmlTransforms, noRoot: true })
                ], XmlTest.prototype, "Transforms", void 0);
                XmlTest = __decorate([
                    _1.XmlElement({ localName: "test" })
                ], XmlTest);
                const test = new XmlTest();
                test.Transforms = new XmlTransforms();
                const t = new XmlTransform();
                t.Value = "Hello";
                test.Transforms.Add(t);
                assert.equal(test.toString(), `<test><transform><Value>Hello</Value></transform></test>`);
            });
            it("no root occurs", () => {
                let XmlTransform = class XmlTransform extends _1.XmlObject {
                    constructor(value) {
                        super();
                        if (value) {
                            this.Value = value;
                        }
                    }
                };
                __decorate([
                    _1.XmlChildElement({ defaultValue: "" })
                ], XmlTransform.prototype, "Value", void 0);
                XmlTransform = __decorate([
                    _1.XmlElement({ localName: "transform" })
                ], XmlTransform);
                let XmlTransforms = class XmlTransforms extends _1.XmlCollection {
                };
                XmlTransforms = __decorate([
                    _1.XmlElement({ localName: "transforms", parser: XmlTransform })
                ], XmlTransforms);
                let XmlTest = class XmlTest extends _1.XmlObject {
                };
                __decorate([
                    _1.XmlChildElement({ minOccurs: 1, maxOccurs: 4, parser: XmlTransforms, noRoot: true })
                ], XmlTest.prototype, "Transforms", void 0);
                XmlTest = __decorate([
                    _1.XmlElement({ localName: "test" })
                ], XmlTest);
                const test = new XmlTest();
                test.Transforms = new XmlTransforms();
                assert.throws(() => {
                    test.toString();
                });
                test.Transforms.Add(new XmlTransform("1"));
                test.Transforms.Add(new XmlTransform("2"));
                test.Transforms.Add(new XmlTransform("3"));
                test.Transforms.Add(new XmlTransform("4"));
                assert.equal(test.toString(), `<test><transform><Value>1</Value></transform><transform><Value>2</Value></transform><transform><Value>3</Value></transform><transform><Value>4</Value></transform></test>`);
                test.Transforms.Add(new XmlTransform("4"));
                assert.throws(() => {
                    test.toString();
                });
            });
            it("occurs", () => {
                let XmlTransform = class XmlTransform extends _1.XmlObject {
                    constructor(value) {
                        super();
                        if (value) {
                            this.Value = value;
                        }
                    }
                };
                __decorate([
                    _1.XmlChildElement({ defaultValue: "" })
                ], XmlTransform.prototype, "Value", void 0);
                XmlTransform = __decorate([
                    _1.XmlElement({ localName: "transform" })
                ], XmlTransform);
                let XmlTransforms = class XmlTransforms extends _1.XmlCollection {
                };
                XmlTransforms = __decorate([
                    _1.XmlElement({ localName: "transforms", parser: XmlTransform })
                ], XmlTransforms);
                let XmlTest = class XmlTest extends _1.XmlObject {
                };
                __decorate([
                    _1.XmlChildElement({ minOccurs: 1, maxOccurs: 4, parser: XmlTransforms })
                ], XmlTest.prototype, "Transforms", void 0);
                XmlTest = __decorate([
                    _1.XmlElement({ localName: "test" })
                ], XmlTest);
                const test = new XmlTest();
                test.Transforms = new XmlTransforms();
                assert.throws(() => {
                    test.toString();
                });
                test.Transforms.Add(new XmlTransform("1"));
                test.Transforms.Add(new XmlTransform("2"));
                test.Transforms.Add(new XmlTransform("3"));
                test.Transforms.Add(new XmlTransform("4"));
                assert.equal(test.toString(), `<test><transforms><transform><Value>1</Value></transform><transform><Value>2</Value></transform><transform><Value>3</Value></transform><transform><Value>4</Value></transform></transforms></test>`);
                test.Transforms.Add(new XmlTransform("4"));
                assert.throws(() => {
                    test.toString();
                });
            });
        });
        context("LoadXml", () => {
            it("simple", () => {
                let XmlTransform = class XmlTransform extends _1.XmlObject {
                };
                __decorate([
                    _1.XmlChildElement({ defaultValue: "" })
                ], XmlTransform.prototype, "Value", void 0);
                XmlTransform = __decorate([
                    _1.XmlElement({ localName: "transform" })
                ], XmlTransform);
                let XmlTransforms = class XmlTransforms extends _1.XmlCollection {
                };
                XmlTransforms = __decorate([
                    _1.XmlElement({ localName: "transforms", parser: XmlTransform })
                ], XmlTransforms);
                let XmlTest = class XmlTest extends _1.XmlObject {
                };
                __decorate([
                    _1.XmlChildElement({ minOccurs: 1, parser: XmlTransforms })
                ], XmlTest.prototype, "Transforms", void 0);
                XmlTest = __decorate([
                    _1.XmlElement({ localName: "test" })
                ], XmlTest);
                const doc = _1.Parse("<test><transforms><transform><Value>Hello</Value></transform></transforms></test>");
                const test = new XmlTest();
                test.LoadXml(doc.documentElement);
                assert.equal(test.Transforms.Count, 1);
                assert.equal(test.Transforms.Item(0).Value, "Hello");
            });
            it("no root", () => {
                let XmlTransform = class XmlTransform extends _1.XmlObject {
                };
                __decorate([
                    _1.XmlChildElement({ defaultValue: "" })
                ], XmlTransform.prototype, "Value", void 0);
                XmlTransform = __decorate([
                    _1.XmlElement({ localName: "transform" })
                ], XmlTransform);
                let XmlTransforms = class XmlTransforms extends _1.XmlCollection {
                };
                XmlTransforms = __decorate([
                    _1.XmlElement({ localName: "transforms", parser: XmlTransform })
                ], XmlTransforms);
                let XmlTest = class XmlTest extends _1.XmlObject {
                };
                __decorate([
                    _1.XmlChildElement({ minOccurs: 1, parser: XmlTransforms, noRoot: true })
                ], XmlTest.prototype, "Transforms", void 0);
                XmlTest = __decorate([
                    _1.XmlElement({ localName: "test" })
                ], XmlTest);
                const doc = _1.Parse("<test><transform><Value>Hello</Value></transform></test>");
                const test = new XmlTest();
                test.LoadXml(doc.documentElement);
                assert.equal(test.Transforms.Count, 1);
                assert.equal(test.Transforms.Item(0).Value, "Hello");
            });
            it("wrong min occurs", () => {
                let XmlTransform = class XmlTransform extends _1.XmlObject {
                };
                __decorate([
                    _1.XmlChildElement({ defaultValue: "" })
                ], XmlTransform.prototype, "Value", void 0);
                XmlTransform = __decorate([
                    _1.XmlElement({ localName: "transform" })
                ], XmlTransform);
                let XmlTransforms = class XmlTransforms extends _1.XmlCollection {
                };
                XmlTransforms = __decorate([
                    _1.XmlElement({ localName: "transforms", parser: XmlTransform })
                ], XmlTransforms);
                let XmlTest = class XmlTest extends _1.XmlObject {
                };
                __decorate([
                    _1.XmlChildElement({ minOccurs: 2, parser: XmlTransforms, noRoot: true })
                ], XmlTest.prototype, "Transforms", void 0);
                XmlTest = __decorate([
                    _1.XmlElement({ localName: "test" })
                ], XmlTest);
                const doc = _1.Parse("<test><transform><Value>Hello</Value></transform></test>");
                const test = new XmlTest();
                assert.throws(() => {
                    test.LoadXml(doc.documentElement);
                });
            });
            it("wrong max occurs", () => {
                let XmlTransform = class XmlTransform extends _1.XmlObject {
                };
                __decorate([
                    _1.XmlChildElement({ defaultValue: "" })
                ], XmlTransform.prototype, "Value", void 0);
                XmlTransform = __decorate([
                    _1.XmlElement({ localName: "transform" })
                ], XmlTransform);
                let XmlTransforms = class XmlTransforms extends _1.XmlCollection {
                };
                XmlTransforms = __decorate([
                    _1.XmlElement({ localName: "transforms", parser: XmlTransform })
                ], XmlTransforms);
                let XmlTest = class XmlTest extends _1.XmlObject {
                };
                __decorate([
                    _1.XmlChildElement({ maxOccurs: 1, parser: XmlTransforms, noRoot: true })
                ], XmlTest.prototype, "Transforms", void 0);
                XmlTest = __decorate([
                    _1.XmlElement({ localName: "test" })
                ], XmlTest);
                const doc = _1.Parse("<test><transform><Value>Hello</Value></transform><transform><Value>Hello</Value></transform></test>");
                const test = new XmlTest();
                assert.throws(() => {
                    test.LoadXml(doc.documentElement);
                });
            });
        });
    });
    it("extends", () => {
        let XmlFirst = class XmlFirst extends _1.XmlObject {
        };
        __decorate([
            _1.XmlAttribute()
        ], XmlFirst.prototype, "Id", void 0);
        XmlFirst = __decorate([
            _1.XmlElement({
                localName: "first",
                namespaceURI: "http://some.com",
                prefix: "p",
            })
        ], XmlFirst);
        let XmlSecond = class XmlSecond extends XmlFirst {
        };
        XmlSecond = __decorate([
            _1.XmlElement({
                localName: "second",
            })
        ], XmlSecond);
        const first = new XmlFirst();
        first.Id = "1";
        assert.equal(first.toString(), `<p:first Id="1" xmlns:p="http://some.com"/>`);
        const second = new XmlSecond();
        second.Id = "2";
        assert.equal(second.toString(), `<p:second Id="2" xmlns:p="http://some.com"/>`);
        assert.equal(XmlFirst.prefix, XmlSecond.prefix);
        assert.equal(XmlFirst.namespaceURI, XmlSecond.namespaceURI);
    });
    context("XmlContent", () => {
        it("Content", () => {
            let XmlTest = class XmlTest extends _1.XmlObject {
            };
            __decorate([
                _1.XmlContent()
            ], XmlTest.prototype, "Value", void 0);
            XmlTest = __decorate([
                _1.XmlElement({
                    localName: "test",
                    namespaceURI: "http://some.com",
                    prefix: "p",
                })
            ], XmlTest);
            const test = new XmlTest();
            assert.equal(test.Value, undefined);
            test.Value = "Test";
            const xml = test.toString();
            assert.equal(xml, `<p:test xmlns:p="http://some.com">Test</p:test>`);
            const test2 = XmlTest.LoadXml(xml);
            assert.equal(test2.Value, test.Value);
        });
        it("Converter", () => {
            let XmlTest = class XmlTest extends _1.XmlObject {
            };
            __decorate([
                _1.XmlContent({
                    converter: _1.XmlNumberConverter,
                })
            ], XmlTest.prototype, "Value", void 0);
            XmlTest = __decorate([
                _1.XmlElement({
                    localName: "test",
                    namespaceURI: "http://some.com",
                    prefix: "p",
                })
            ], XmlTest);
            const test = new XmlTest();
            assert.equal(test.Value, undefined);
            test.Value = 123;
            const xml = test.toString();
            assert.equal(xml, `<p:test xmlns:p="http://some.com">123</p:test>`);
            const test2 = XmlTest.LoadXml(xml);
            assert.equal(test2.Value, test.Value);
        });
        it("Required", () => {
            let XmlTest = class XmlTest extends _1.XmlObject {
            };
            __decorate([
                _1.XmlAttribute()
            ], XmlTest.prototype, "Id", void 0);
            __decorate([
                _1.XmlContent({
                    required: true,
                })
            ], XmlTest.prototype, "Value", void 0);
            XmlTest = __decorate([
                _1.XmlElement({
                    localName: "test",
                    namespaceURI: "http://some.com",
                    prefix: "p",
                })
            ], XmlTest);
            const test = new XmlTest();
            assert.equal(test.Value, undefined);
            test.Id = "1";
            assert.throws(() => test.GetXml());
            test.Value = "test";
            const xml = test.toString();
            assert.equal(xml, `<p:test Id="1" xmlns:p="http://some.com">test</p:test>`);
            assert.throws(() => XmlTest.LoadXml(`<p:test Id="1" xmlns:p="http://some.com"/>`));
            const test2 = XmlTest.LoadXml(xml);
            assert.equal(test2.Value, test.Value);
        });
        it("Default value", () => {
            let XmlTest = class XmlTest extends _1.XmlObject {
            };
            __decorate([
                _1.XmlAttribute()
            ], XmlTest.prototype, "Id", void 0);
            __decorate([
                _1.XmlContent({
                    required: true,
                    defaultValue: "test",
                })
            ], XmlTest.prototype, "Value", void 0);
            XmlTest = __decorate([
                _1.XmlElement({
                    localName: "test",
                    namespaceURI: "http://some.com",
                    prefix: "p",
                })
            ], XmlTest);
            const test = new XmlTest();
            assert.equal(test.Value, "test");
            test.Id = "1";
            const xml = test.toString();
            assert.equal(xml, `<p:test Id="1" xmlns:p="http://some.com">test</p:test>`);
            assert.throws(() => XmlTest.LoadXml(`<p:test Id="1" xmlns:p="http://some.com"/>`));
            const test2 = XmlTest.LoadXml(xml);
            assert.equal(test2.Value, test.Value);
        });
    });
});
