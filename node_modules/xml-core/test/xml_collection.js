"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const _1 = require("../");
context("XmlCollection", () => {
    let Child = class Child extends _1.XmlObject {
        constructor(id) {
            super();
            if (id !== void 0) {
                this.Id = id;
            }
        }
    };
    __decorate([
        _1.XmlAttribute({ localName: "id", defaultValue: 0 })
    ], Child.prototype, "Id", void 0);
    Child = __decorate([
        _1.XmlElement({
            localName: "child",
            namespaceURI: "http://some.com",
        })
    ], Child);
    let Children = class Children extends _1.XmlCollection {
    };
    Children = __decorate([
        _1.XmlElement({
            localName: "children",
            namespaceURI: "http://some.com",
        })
    ], Children);
    it("Pop", () => {
        const col = new Children();
        col.Add(new Child(1));
        col.Add(new Child(2));
        col.Add(new Child(3));
        assert.equal(col.Count, 3);
        col.Pop();
        assert.equal(col.Count, 2);
        assert.equal(col.Item(0).Id, 1);
        assert.equal(col.Item(1).Id, 2);
    });
    it("RemoveAt", () => {
        const col = new Children();
        col.Add(new Child(1));
        col.Add(new Child(2));
        col.Add(new Child(3));
        assert.equal(col.Count, 3);
        col.RemoveAt(0);
        assert.equal(col.Count, 2);
        assert.equal(col.Item(0).Id, 2);
        assert.equal(col.Item(1).Id, 3);
    });
    it("Clear", () => {
        const col = new Children();
        col.Add(new Child(1));
        col.Add(new Child(2));
        col.Add(new Child(3));
        assert.equal(col.Count, 3);
        col.Clear();
        assert.equal(col.Count, 0);
    });
    it("IsEmpty", () => {
        const col = new Children();
        assert.equal(col.IsEmpty(), true);
        col.Add(new Child(1));
        assert.equal(col.IsEmpty(), false);
    });
    it("ForEach", () => {
        const col = new Children();
        col.Add(new Child(1));
        col.Add(new Child(2));
        col.Add(new Child(3));
        let id = 1;
        col.ForEach((item) => {
            assert.equal(item.Id, id++);
        });
    });
    it("Map", () => {
        const col = new Children();
        col.Add(new Child(1));
        col.Add(new Child(2));
        col.Add(new Child(3));
        let id = 1;
        col
            .Map((item) => {
            return item.Id;
        })
            .ForEach((item) => {
            assert.equal(item, id++);
        });
    });
    it("Filter", () => {
        const col = new Children();
        col.Add(new Child(1));
        col.Add(new Child(2));
        col.Add(new Child(3));
        const list = col.Filter((item) => {
            return item.Id === 3;
        });
        assert.equal(list.Count, 1);
        assert.equal(list.Item(0).Id, 3);
    });
    it("Sort", () => {
        const col = new Children();
        col.Add(new Child(1));
        col.Add(new Child(3));
        col.Add(new Child(2));
        const list = col.Sort((a, b) => {
            if (a.Id > b.Id) {
                return -1;
            }
            if (a.Id < b.Id) {
                return 1;
            }
            return 0;
        });
        assert.equal(list.Count, 3);
        assert.equal(list.Item(0).Id, 3);
        assert.equal(list.Item(1).Id, 2);
        assert.equal(list.Item(2).Id, 1);
    });
    it("Every", () => {
        const col = new Children();
        col.Add(new Child(1));
        col.Add(new Child(1));
        col.Add(new Child(1));
        assert.equal(col.Every((item) => {
            return item.Id === 1;
        }), true);
        col.Add(new Child(2));
        assert.equal(col.Every((item) => {
            return item.Id === 1;
        }), false);
    });
});
