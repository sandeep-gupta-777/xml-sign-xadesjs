"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const _1 = require("../");
const _2 = require("../");
const _3 = require("../");
context("GetXml/LoadXml/HasChanged", () => {
    it("Simple", () => {
        let Test = class Test extends _2.XmlObject {
        };
        __decorate([
            _1.XmlAttribute({ localName: "id", defaultValue: "1" })
        ], Test.prototype, "Id", void 0);
        __decorate([
            _1.XmlAttribute({ localName: "class", defaultValue: "2", required: true })
        ], Test.prototype, "Class", void 0);
        __decorate([
            _1.XmlChildElement({ localName: "algorithm", namespaceURI: "http://some.com", defaultValue: "3" })
        ], Test.prototype, "Algorithm", void 0);
        __decorate([
            _1.XmlChildElement({ localName: "method", namespaceURI: "http://some.com", defaultValue: "4", required: true })
        ], Test.prototype, "Method", void 0);
        Test = __decorate([
            _1.XmlElement({
                localName: "test",
                namespaceURI: "http://some.com",
            })
        ], Test);
        const t = new Test();
        assert.equal(t.toString(), "", "initialized class should be empty");
        t.Id = "123";
        const xml = `<test id="123" class="2" xmlns="http://some.com"><method>4</method></test>`;
        assert.equal(t.toString(), xml);
        const p = new Test();
        p.LoadXml(xml);
        assert.equal(p.Id, "123");
        assert.equal(p.Class, "2");
        assert.equal(p.Algorithm, "3");
        assert.equal(p.Method, "4");
        assert.equal(p.HasChanged(), false);
    });
    it("With child element", () => {
        let Child = class Child extends _2.XmlObject {
        };
        __decorate([
            _1.XmlAttribute({ localName: "id", defaultValue: "" })
        ], Child.prototype, "Id", void 0);
        Child = __decorate([
            _1.XmlElement({
                localName: "child",
                namespaceURI: "http://some.com",
            })
        ], Child);
        let Test = class Test extends _2.XmlObject {
        };
        __decorate([
            _1.XmlChildElement({ parser: Child })
        ], Test.prototype, "Child", void 0);
        Test = __decorate([
            _1.XmlElement({
                localName: "test",
                namespaceURI: "http://some.com",
            })
        ], Test);
        const t = new Test();
        assert.equal(t.toString(), "", "initialized class should be empty");
        assert.equal(t.HasChanged(), false);
        t.Child.Id = "1";
        const xml = `<test xmlns="http://some.com"><child id="1"/></test>`;
        assert.equal(t.HasChanged(), true);
        assert.equal(t.toString(), xml);
        assert.equal(t.HasChanged(), false);
        const p = Test.LoadXml(xml);
        assert.equal(!!p.Child, true);
        assert.equal(p.Child.Id, "1");
        assert.equal(p.Child.NamespaceURI, "http://some.com");
        assert.equal(p.HasChanged(), false);
    });
    it("With child XmlCollection", () => {
        let Child = class Child extends _2.XmlObject {
        };
        __decorate([
            _1.XmlAttribute({ localName: "id", defaultValue: "" })
        ], Child.prototype, "Id", void 0);
        Child = __decorate([
            _1.XmlElement({
                localName: "child",
                namespaceURI: "http://some.com",
            })
        ], Child);
        let Childs = class Childs extends _2.XmlCollection {
        };
        Childs = __decorate([
            _1.XmlElement({
                localName: "childs",
                namespaceURI: "http://some.com",
                parser: Child,
            })
        ], Childs);
        let Test = class Test extends _2.XmlObject {
        };
        __decorate([
            _1.XmlChildElement({ parser: Childs })
        ], Test.prototype, "Childs", void 0);
        Test = __decorate([
            _1.XmlElement({
                localName: "test",
                namespaceURI: "http://some.com",
            })
        ], Test);
        const t = new Test();
        assert.equal(t.toString(), "", "initialized class should be empty");
        t.Childs.Add(new Child());
        const xml = `<test xmlns="http://some.com"><childs/></test>`;
        assert.equal(t.toString(), xml);
        const p = Test.LoadXml(xml);
        assert.equal(p.Childs.Count, 0);
        assert.equal(p.HasChanged(), false);
    });
    it("With child requierd XmlCollection", () => {
        let Child = class Child extends _2.XmlObject {
        };
        __decorate([
            _1.XmlAttribute({ localName: "id", defaultValue: "" })
        ], Child.prototype, "Id", void 0);
        Child = __decorate([
            _1.XmlElement({
                localName: "child",
                namespaceURI: "http://some.com",
            })
        ], Child);
        let Childs = class Childs extends _2.XmlCollection {
        };
        Childs = __decorate([
            _1.XmlElement({
                localName: "childs",
                namespaceURI: "http://some.com",
                parser: Child,
            })
        ], Childs);
        let Test = class Test extends _2.XmlObject {
        };
        __decorate([
            _1.XmlChildElement({ parser: Childs })
        ], Test.prototype, "Childs", void 0);
        __decorate([
            _1.XmlChildElement({ localName: "required", parser: Childs, minOccurs: 1 })
        ], Test.prototype, "Childs2", void 0);
        Test = __decorate([
            _1.XmlElement({
                localName: "test",
                namespaceURI: "http://some.com",
            })
        ], Test);
        const t = new Test();
        assert.equal(t.toString(), "");
        t.Childs.Add(new Child());
        assert.throws(() => t.toString());
        t.Childs2.Add(new Child());
        assert.throws(() => t.toString());
        t.Childs2.Item(0).Id = "test";
        const xml = `<test xmlns="http://some.com"><childs/><required><child id="test"/></required></test>`;
        assert.equal(t.toString(), xml);
        const p = Test.LoadXml(xml);
        assert.equal(p.Childs.Count, 0);
        assert.equal(p.Childs2.LocalName, "required");
        assert.equal(p.Childs2.Count, 1);
        assert.equal(p.Childs2.Item(0).Id, "test");
        assert.equal(p.HasChanged(), false);
    });
    it("praser for attributes", () => {
        let Test = class Test extends _2.XmlObject {
            constructor() {
                super(...arguments);
                this.Value = "test";
            }
        };
        __decorate([
            _1.XmlAttribute({
                localName: "value",
            })
        ], Test.prototype, "Value", void 0);
        __decorate([
            _1.XmlAttribute({
                localName: "version",
                converter: _3.XmlNumberConverter,
            })
        ], Test.prototype, "Version", void 0);
        Test = __decorate([
            _1.XmlElement({
                localName: "test",
                namespaceURI: "https://some.com",
            })
        ], Test);
        const t = new Test();
        let xml = `<test value="test" xmlns="https://some.com"/>`;
        assert.equal(t.toString(), xml);
        Test.LoadXml(xml);
        t.Version = 1;
        xml = `<test value="test" version="1" xmlns="https://some.com"/>`;
        assert.equal(t.toString(), xml);
        Test.LoadXml(xml);
    });
    it("praser for child element", () => {
        let Test = class Test extends _2.XmlObject {
            constructor() {
                super(...arguments);
                this.Value = "test";
            }
        };
        __decorate([
            _1.XmlChildElement({
                localName: "value",
                namespaceURI: "https://some.com",
            })
        ], Test.prototype, "Value", void 0);
        __decorate([
            _1.XmlChildElement({
                localName: "version",
                namespaceURI: "https://some.com",
                converter: _3.XmlNumberConverter,
            })
        ], Test.prototype, "Version", void 0);
        Test = __decorate([
            _1.XmlElement({
                localName: "test",
                namespaceURI: "https://some.com",
            })
        ], Test);
        const t = new Test();
        let xml = `<test xmlns="https://some.com"><value>test</value></test>`;
        assert.equal(t.toString(), xml);
        Test.LoadXml(xml);
        t.Version = 1;
        xml = `<test xmlns="https://some.com"><value>test</value><version>1</version></test>`;
        assert.equal(t.toString(), xml);
        Test.LoadXml(xml);
    });
});
