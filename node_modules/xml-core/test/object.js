"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const _1 = require("../");
const _2 = require("../");
context("XmlObject", () => {
    it("IsEmpty", () => {
        let Test = class Test extends _2.XmlObject {
        };
        __decorate([
            _1.XmlAttribute()
        ], Test.prototype, "Id", void 0);
        Test = __decorate([
            _1.XmlElement({ localName: "test", namespaceURI: "http://some.com" })
        ], Test);
        const test = new Test();
        assert.equal(test.IsEmpty(), true);
        test.Id = "1";
        assert.equal(test.IsEmpty(), false);
        const xml = test.toString();
        const test2 = Test.LoadXml(xml);
        assert.equal(test2.IsEmpty(), false);
    });
    context("Get xml Element", () => {
        const xml = `<root id="0"><first id="1"/><second Id="2"/><third ID="3"/><child/><n:child xmlns:n="html://n"></root>`;
        let obj;
        let Test = class Test extends _2.XmlObject {
        };
        Test = __decorate([
            _1.XmlElement({
                localName: "root",
            })
        ], Test);
        before(() => {
            obj = Test.LoadXml(xml);
        });
        context("GetElement", () => {
            it("required", () => {
                assert.throws(() => {
                    obj.GetElement("NotExit", true);
                });
            });
            it("success", () => {
                const node = obj.GetElement("third");
                assert.equal(!!node, true);
                assert.equal(node.nodeName, "third");
            });
            it("element not exist", () => {
                const obj2 = new Test();
                assert.throws(() => {
                    obj2.GetElement("third");
                });
            });
        });
        context("GetChild", () => {
            it("required", () => {
                assert.throws(() => {
                    obj.GetChild("NotExit", true);
                });
            });
            it("success", () => {
                const node = obj.GetChild("third");
                assert.equal(!!node, true);
                assert.equal(node.nodeName, "third");
            });
            it("element not exist", () => {
                const obj2 = new Test();
                assert.throws(() => {
                    obj2.GetChild("third");
                });
            });
        });
        context("GetChildren", () => {
            it("by name", () => {
                const list = obj.GetChildren("child");
                assert.equal(list.length, 2);
            });
            it("by name and namespace", () => {
                const list = obj.GetChildren("child", "html://n");
                assert.equal(list.length, 1);
            });
            it("element not exist", () => {
                const obj2 = new Test();
                assert.throws(() => {
                    obj2.GetChildren("child");
                });
            });
        });
        context("GetFirstChild", () => {
            it("by name", () => {
                const node = obj.GetFirstChild("child");
                assert.equal(!!node, true);
                assert.equal(node.localName, "child");
            });
            it("by name and namespace", () => {
                const node = obj.GetFirstChild("child", "html://n");
                assert.equal(!!node, true);
                assert.equal(node.localName, "child");
                assert.equal(node.namespaceURI, "html://n");
            });
            it("element not exist", () => {
                const obj2 = new Test();
                assert.throws(() => {
                    obj2.GetFirstChild("child");
                });
            });
        });
        context("GetAttribute", () => {
            it("by name", () => {
                const attr = obj.GetAttribute("id", "2");
                assert.equal(attr, "0");
            });
            it("by default", () => {
                const attr = obj.GetAttribute("test", "3", false);
                assert.equal(attr, "3");
            });
            it("required", () => {
                assert.throws(() => {
                    obj.GetAttribute("test", null, true);
                });
            });
            it("element not exist", () => {
                const obj2 = new Test();
                assert.throws(() => {
                    obj2.GetAttribute("id", "4");
                });
            });
        });
        context("GetElementById", () => {
            it("id", () => {
                const el = obj.GetXml();
                const f = _2.XmlObject.GetElementById(el, "1");
                assert.equal(f.localName, "first");
            });
            it("Id", () => {
                const el = obj.GetXml();
                const f = _2.XmlObject.GetElementById(el, "2");
                assert.equal(f.localName, "second");
            });
            it("ID", () => {
                const el = obj.GetXml();
                const f = _2.XmlObject.GetElementById(el, "3");
                assert.equal(f.localName, "third");
            });
        });
    });
});
